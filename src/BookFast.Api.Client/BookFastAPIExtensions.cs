// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BookFast.Api.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for BookFastAPI.
    /// </summary>
    public static partial class BookFastAPIExtensions
    {
            /// <summary>
            /// List accommodations by facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            public static IList<AccommodationRepresentation> ListAccommodations(this IBookFastAPI operations, string facilityId)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).ListAccommodationsAsync(facilityId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List accommodations by facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AccommodationRepresentation>> ListAccommodationsAsync(this IBookFastAPI operations, string facilityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAccommodationsWithHttpMessagesAsync(facilityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            public static AccommodationRepresentation CreateAccommodation(this IBookFastAPI operations, string facilityId, AccommodationData accommodationData = default(AccommodationData))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).CreateAccommodationAsync(facilityId, accommodationData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccommodationRepresentation> CreateAccommodationAsync(this IBookFastAPI operations, string facilityId, AccommodationData accommodationData = default(AccommodationData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAccommodationWithHttpMessagesAsync(facilityId, accommodationData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find accommodation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            public static AccommodationRepresentation FindAccommodation(this IBookFastAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).FindAccommodationAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find accommodation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccommodationRepresentation> FindAccommodationAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindAccommodationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            public static AccommodationRepresentation UpdateAccommodation(this IBookFastAPI operations, string id, AccommodationData accommodationData = default(AccommodationData))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).UpdateAccommodationAsync(id, accommodationData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccommodationRepresentation> UpdateAccommodationAsync(this IBookFastAPI operations, string id, AccommodationData accommodationData = default(AccommodationData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAccommodationWithHttpMessagesAsync(id, accommodationData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            public static void DeleteAccommodation(this IBookFastAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IBookFastAPI)s).DeleteAccommodationAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAccommodationAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteAccommodationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List bookings by customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<BookingRepresentation> ListBookings(this IBookFastAPI operations)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).ListBookingsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List bookings by customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BookingRepresentation>> ListBookingsAsync(this IBookFastAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBookingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find booking by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Booking ID
            /// </param>
            public static BookingRepresentation FindBooking(this IBookFastAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).FindBookingAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find booking by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Booking ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BookingRepresentation> FindBookingAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindBookingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel booking
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Booking ID
            /// </param>
            public static void DeleteBooking(this IBookFastAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IBookFastAPI)s).DeleteBookingAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel booking
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Booking ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBookingAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBookingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Book an accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accommodationId'>
            /// Accommodation ID
            /// </param>
            /// <param name='bookingData'>
            /// Booking details
            /// </param>
            public static BookingRepresentation CreateBooking(this IBookFastAPI operations, string accommodationId, BookingData bookingData = default(BookingData))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).CreateBookingAsync(accommodationId, bookingData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Book an accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accommodationId'>
            /// Accommodation ID
            /// </param>
            /// <param name='bookingData'>
            /// Booking details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BookingRepresentation> CreateBookingAsync(this IBookFastAPI operations, string accommodationId, BookingData bookingData = default(BookingData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBookingWithHttpMessagesAsync(accommodationId, bookingData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List facilities by owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FacilityRepresentation> ListFacilities(this IBookFastAPI operations)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).ListFacilitiesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List facilities by owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FacilityRepresentation>> ListFacilitiesAsync(this IBookFastAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFacilitiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            public static FacilityRepresentation CreateFacility(this IBookFastAPI operations, FacilityData facilityData = default(FacilityData))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).CreateFacilityAsync(facilityData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FacilityRepresentation> CreateFacilityAsync(this IBookFastAPI operations, FacilityData facilityData = default(FacilityData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFacilityWithHttpMessagesAsync(facilityData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find facility by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            public static FacilityRepresentation FindFacility(this IBookFastAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).FindFacilityAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find facility by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FacilityRepresentation> FindFacilityAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindFacilityWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            public static FacilityRepresentation UpdateFacility(this IBookFastAPI operations, string id, FacilityData facilityData = default(FacilityData))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).UpdateFacilityAsync(id, facilityData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FacilityRepresentation> UpdateFacilityAsync(this IBookFastAPI operations, string id, FacilityData facilityData = default(FacilityData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFacilityWithHttpMessagesAsync(id, facilityData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            public static void DeleteFacility(this IBookFastAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IBookFastAPI)s).DeleteFacilityAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFacilityAsync(this IBookFastAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteFacilityWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Search for accommodations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchText'>
            /// Search terms
            /// </param>
            /// <param name='page'>
            /// Page number
            /// </param>
            public static IList<SearchResult> Search(this IBookFastAPI operations, string searchText = default(string), int? page = default(int?))
            {
                return Task.Factory.StartNew(s => ((IBookFastAPI)s).SearchAsync(searchText, page), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for accommodations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchText'>
            /// Search terms
            /// </param>
            /// <param name='page'>
            /// Page number
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SearchResult>> SearchAsync(this IBookFastAPI operations, string searchText = default(string), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(searchText, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
