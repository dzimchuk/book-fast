// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BookFast.Api.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class FacilityData
    {
        /// <summary>
        /// Initializes a new instance of the FacilityData class.
        /// </summary>
        public FacilityData() { }

        /// <summary>
        /// Initializes a new instance of the FacilityData class.
        /// </summary>
        public FacilityData(string name, string streetAddress, string description = default(string), double? longitude = default(double?), double? latitude = default(double?))
        {
            Name = name;
            Description = description;
            StreetAddress = streetAddress;
            Longitude = longitude;
            Latitude = latitude;
        }

        /// <summary>
        /// Facility name
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Facility description
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Facility street address
        /// </summary>
        [JsonProperty(PropertyName = "StreetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Latitude
        /// </summary>
        [JsonProperty(PropertyName = "Longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        [JsonProperty(PropertyName = "Latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (StreetAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StreetAddress");
            }
            if (this.Name != null)
            {
                if (this.Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (this.Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 1000);
                }
                if (this.Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (this.StreetAddress != null)
            {
                if (this.StreetAddress.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "StreetAddress", 100);
                }
                if (this.StreetAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "StreetAddress", 0);
                }
            }
        }
    }
}
